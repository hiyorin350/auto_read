{"ast":null,"code":"import React,{useState}from'react';import{ChakraProvider,Button,Heading,Box,Input,FormControl,FormLabel,VStack,HStack,Progress}from\"@chakra-ui/react\";import axios from'axios';// Axiosのインポート\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[uploadedFile,setUploadedFile]=useState(null);const[file,setFile]=useState(null);const[progress,setProgress]=useState(0);// プログレスバーの進行状況を管理\nconst[isUploading,setIsUploading]=useState(false);// アップロード中かどうかを管理\nconst handleFileChange=e=>{const file=e.target.files[0];setFile(file);if(file){const reader=new FileReader();reader.onload=e=>{setUploadedFile(e.target.result);};reader.readAsDataURL(file);}};const handleAutoRead=async()=>{if(!file){alert('ファイルを選択してください。');return;}const formData=new FormData();formData.append('file',file);setIsUploading(true);// アップロード開始\nsetProgress(0);// プログレスバーを0からスタート\n// プログレスバーを15秒かけて100%にするシミュレーション\nconst interval=setInterval(()=>{setProgress(prevProgress=>{const nextProgress=prevProgress+100/15;// 1秒ごとに 100/15 (約6.67%) 進める\nif(nextProgress>=100){clearInterval(interval);// 100%に達したらクリア\nsetProgress(100);}return nextProgress;});},1000);// 1秒ごとに更新\ntry{// 実際のアップロード処理 (進行状況は無視)\nconst response=await axios.post('http://localhost:3000/upload',formData,{headers:{'Content-Type':'multipart/form-data'}});alert('ファイルアップロード成功');}catch(error){console.error('アップロードエラー:',error);alert('ファイルアップロード失敗');}finally{setIsUploading(false);// アップロード終了\n}};return/*#__PURE__*/_jsx(ChakraProvider,{children:/*#__PURE__*/_jsxs(Box,{m:5,children:[/*#__PURE__*/_jsx(Heading,{mb:4,children:\"Autoread Progress Simulation\"}),/*#__PURE__*/_jsxs(VStack,{spacing:5,align:\"stretch\",children:[/*#__PURE__*/_jsxs(FormControl,{children:[/*#__PURE__*/_jsx(FormLabel,{children:\"\\u30D5\\u30A1\\u30A4\\u30EB\\u3092\\u9078\\u629E\"}),/*#__PURE__*/_jsx(Input,{type:\"file\",onChange:handleFileChange})]}),/*#__PURE__*/_jsx(Progress,{value:progress,size:\"sm\",colorScheme:\"green\",mb:4}),/*#__PURE__*/_jsx(Button,{colorScheme:\"orange\",onClick:handleAutoRead,isDisabled:isUploading,children:isUploading?\"アップロード中...\":\"自動読み取り\"})]})]})});}export default App;","map":{"version":3,"names":["React","useState","ChakraProvider","Button","Heading","Box","Input","FormControl","FormLabel","VStack","HStack","Progress","axios","jsx","_jsx","jsxs","_jsxs","App","uploadedFile","setUploadedFile","file","setFile","progress","setProgress","isUploading","setIsUploading","handleFileChange","e","target","files","reader","FileReader","onload","result","readAsDataURL","handleAutoRead","alert","formData","FormData","append","interval","setInterval","prevProgress","nextProgress","clearInterval","response","post","headers","error","console","children","m","mb","spacing","align","type","onChange","value","size","colorScheme","onClick","isDisabled"],"sources":["/Users/hiyori/autoread_dev/src/FileUpload.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { ChakraProvider, Button, Heading, Box, Input, FormControl, FormLabel, VStack, HStack, Progress } from \"@chakra-ui/react\";\nimport axios from 'axios';  // Axiosのインポート\n\nfunction App() {\n  const [uploadedFile, setUploadedFile] = useState(null);\n  const [file, setFile] = useState(null);\n  const [progress, setProgress] = useState(0); // プログレスバーの進行状況を管理\n  const [isUploading, setIsUploading] = useState(false); // アップロード中かどうかを管理\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    setFile(file);\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setUploadedFile(e.target.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleAutoRead = async () => {\n    if (!file) {\n      alert('ファイルを選択してください。');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    setIsUploading(true); // アップロード開始\n    setProgress(0); // プログレスバーを0からスタート\n\n    // プログレスバーを15秒かけて100%にするシミュレーション\n    const interval = setInterval(() => {\n      setProgress((prevProgress) => {\n        const nextProgress = prevProgress + (100 / 15); // 1秒ごとに 100/15 (約6.67%) 進める\n        if (nextProgress >= 100) {\n          clearInterval(interval); // 100%に達したらクリア\n          setProgress(100);\n        }\n        return nextProgress;\n      });\n    }, 1000); // 1秒ごとに更新\n\n    try {\n      // 実際のアップロード処理 (進行状況は無視)\n      const response = await axios.post('http://localhost:3000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n\n      alert('ファイルアップロード成功');\n    } catch (error) {\n      console.error('アップロードエラー:', error);\n      alert('ファイルアップロード失敗');\n    } finally {\n      setIsUploading(false); // アップロード終了\n    }\n  };\n\n  return (\n    <ChakraProvider>\n      <Box m={5}>\n        <Heading mb={4}>Autoread Progress Simulation</Heading>\n        <VStack spacing={5} align=\"stretch\">\n          <FormControl>\n            <FormLabel>ファイルを選択</FormLabel>\n            <Input type=\"file\" onChange={handleFileChange} />\n          </FormControl>\n          <Progress value={progress} size=\"sm\" colorScheme=\"green\" mb={4} />\n          <Button colorScheme=\"orange\" onClick={handleAutoRead} isDisabled={isUploading}>\n            {isUploading ? \"アップロード中...\" : \"自動読み取り\"}\n          </Button>\n        </VStack>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}